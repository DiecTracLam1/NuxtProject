// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  name          String?
  username      String     @unique
  password      String
  phone         String
  profileImage  String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Refresh token
  refreshToken  RefreshToken[]
  // Order
  orders        Order[]
}

model RefreshToken {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  token         String @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String @db.ObjectId
  user          User @relation(fields: [userId], references: [id])
}


model Brand {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  products      Product[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String[]
  price         Float
  salePrice     Float
  description   String
  type          String[]
  isSale        Boolean  
  sizeList      String[]
  colorList     String[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  brand         Brand      @relation(fields: [brandId], references: [id])
  brandId       String     @db.ObjectId

  order         Order?     @relation(fields: [orderId], references: [id])
  orderId       String[]   @db.ObjectId

  stock         Stock[]
}

model Stock {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  quantity      Int
  

  // product
  product       Product    @relation(fields: [productId], references: [id])
  productId     String     @db.ObjectId @unique

  //warehouse 
  wareHouse     WareHouse? @relation(fields: [wareHouseId], references: [id])
  wareHouseId   String     @db.ObjectId
}

model WareHouse {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // stock
  stock         Stock[]
}

model Order {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice    Float
  status        String     @default("2")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt @default(now())
  cancelMsg     String     @default("")

  user          User       @relation(fields: [userId], references: [id])
  userId        String     @db.ObjectId 
  productList   Product[]
  product       Json
}

